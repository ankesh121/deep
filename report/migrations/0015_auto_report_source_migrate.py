# -*- coding: utf-8 -*-
# Generated by Navin Ayer(@thenav56) with Django 1.10.5 on 2017-03-08 14:33
from __future__ import unicode_literals

from django.db import migrations
import json
import re


def get_dict(data, fields, default=''):
    _data = data
    fields = fields.split('.')
    for field in fields:
        _data = _data.get(field)
        if _data is None:
            return default
    return _data


date_regex = r'\d{1,2}/\d{1,2}/\d{4}|\d{2}/\d{2,4}'
url_regex = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.'\
             '&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
name_regex = r'[\w\s,\-&]+'


def new_source(value):
    new_value = []
    if value:
        for m in re.finditer(r'(?P<name>'+name_regex+')[\s]+' +
                             '(?P<date>'+date_regex+')?[\s-]*' +
                             '(?P<url>'+url_regex+')?', value):
            if m.group('name') or m.group('date') or m.group('url'):
                new_value.append({
                    'name': m.group('name').strip()
                    if m.group('name') else None,
                    'url': m.group('url').strip()
                    if m.group('url') else None,
                    'date': m.group('date').strip()
                    if m.group('date') else None,
                    })
    return new_value


def forwards_func(apps, schema_editor):
    WeeklyReport = apps.get_model("report", "WeeklyReport")
    db_alias = schema_editor.connection.alias
    for wr in WeeklyReport.objects.using(db_alias).all():
        data = json.loads(wr.data)

        for source in get_dict(data, 'human.source', []):
            value = data['human']['source'][source]
            new_value = new_source(value)
            data['human']['source'][source] = {'new': new_value,
                                               'old': value}

        for people_field in ['total', 'at-risk', 'moderate',
                             'severe', 'planned']:
            for source in get_dict(data, 'people.'+people_field+'-source', []):
                value = data['people'][people_field+'-source'][source]
                new_value = new_source(value)
                data['people'][people_field+'-source'][source] = {
                        'new': new_value,
                        'old': value}

        if get_dict(data, 'ipc.f', []):
            value = data['ipc']['f']
            new_value = new_source(value)
            data['ipc']['f'] = {'new': new_value,
                                'old': value}

        for source in get_dict(data, 'access-pin.source', []):
            value = data['access-pin']['source'][source]
            new_value = new_source(value)
            data['access-pin']['source'][source] = {'new': new_value,
                                                    'old': value}

        for source in get_dict(data, 'access-extra.source', []):
            value = data['access-extra']['source'][source]
            new_value = new_source(value)
            data['access-extra']['source'][source] = {'new': new_value,
                                                      'old': value}

        wr.data = json.dumps(data)
        wr.save()


def reverse_func(apps, schema_editor):
    WeeklyReport = apps.get_model("report", "WeeklyReport")
    db_alias = schema_editor.connection.alias
    for wr in WeeklyReport.objects.using(db_alias).all():
        data = json.loads(wr.data)

        for source in get_dict(data, 'human.source', []):
            old = data['human']['source'][source].get('old')
            data['human']['source'][source] = old

        for people_field in ['total', 'at-risk', 'moderate',
                             'severe', 'planned']:
            for source in get_dict(data, 'people.'+people_field+'-source', []):
                old = data['people'][people_field+'-source'][source].get('old')
                data['people'][people_field+'-source'][source] = old

        if get_dict(data, 'ipc.f', []):
            old = data['ipc']['f'].get('old')
            data['ipc']['f'] = old

        for source in get_dict(data, 'access-pin.source', []):
            old = data['access-pin']['source'][source].get('old')
            data['access-pin']['source'][source] = old

        for source in get_dict(data, 'access-extra.source', []):
            old = data['access-extra']['source'][source].get('old')
            data['access-extra']['source'][source] = old

        wr.data = json.dumps(data)
        wr.save()


class Migration(migrations.Migration):

    dependencies = [
        ('report', '0014_auto_20170301_0837'),
    ]

    operations = [
        # Migrate Data to New Format
        migrations.RunPython(forwards_func, reverse_func),
    ]
